#!/bin/bash

SERVICE_PREFIX=datagram
IMAGE_NAME=datagram-node
BASE_PORT=5000

function build_image() {
    echo "üîπ –°—Ç–≤–æ—Ä—é—î–º–æ Dockerfile..."
    cat << EOF > Dockerfile
FROM ubuntu:20.04

RUN apt-get update && apt-get install -y wget screen && rm -rf /var/lib/apt/lists/*

RUN wget https://github.com/Datagram-Group/datagram-cli-release/releases/latest/download/datagram-cli-x86_64-linux \\
    && mv datagram-cli-x86_64-linux /usr/bin/datagram-cli \\
    && chmod +x /usr/bin/datagram-cli

CMD ["/bin/bash", "-c", "screen -S datagram -d -m datagram-cli run -- -key \$DATAGRAM_KEY && tail -f /dev/null"]
EOF

    echo "üîπ –ë—É–¥—É—î–º–æ Docker-–æ–±—Ä–∞–∑..."
    if ! docker build -t $IMAGE_NAME .; then
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Docker-–æ–±—Ä–∞–∑—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ Dockerfile."
        exit 1
    fi

    rm Dockerfile
    echo "‚úÖ Docker-–æ–±—Ä–∞–∑ $IMAGE_NAME —Å—Ç–≤–æ—Ä–µ–Ω–æ."
}

function install_nodes() {
    build_image

    echo "üëâ –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á—ñ –¥–ª—è –Ω–æ–¥ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫)."
    echo "üîπ –ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –Ω–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É —Ä—è–¥–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."

    NODE_KEYS=()
    while true; do
        read -r key
        [[ -z "$key" ]] && break
        NODE_KEYS+=("$key")
    done

    NODE_COUNT=${#NODE_KEYS[@]}
    echo "üîπ –í–∏ –≤–≤–µ–ª–∏ $NODE_COUNT –∫–ª—é—á(—ñ–≤). –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    echo "üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker ps -a --filter "name=${SERVICE_PREFIX}_" -q | xargs -r docker rm -f

    for (( i=0; i<NODE_COUNT; i++ )); do
        NODE_KEY="${NODE_KEYS[$i]}"
        NODE_NUM=$((i+1))
        PORT=$((BASE_PORT + i))
        CONTAINER_NAME="${SERVICE_PREFIX}_$NODE_NUM"

        echo "üîπ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $CONTAINER_NAME –∑ –ø–æ—Ä—Ç–æ–º $PORT"

        if ! docker run -d --restart unless-stopped --name "$CONTAINER_NAME" -e DATAGRAM_KEY="$NODE_KEY" -p "$PORT:5000" $IMAGE_NAME; then
            echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $CONTAINER_NAME"
        else
            echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –∑–∞–ø—É—â–µ–Ω–æ (–ø–æ—Ä—Ç $PORT)"
            echo "‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
            sleep 2
        fi
    done

    echo "‚úÖ –£—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'docker ps' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É."
}

function restart_nodes() {
    echo "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    mapfile -t containers < <(docker ps --filter "name=${SERVICE_PREFIX}_" --format "{{.Names}}")
    if [ ${#containers[@]} -eq 0 ]; then
        echo "‚ùå –ù–µ–º–∞—î –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É."
        return
    fi
    for container in "${containers[@]}"; do
        docker restart "$container"
        echo "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ $container"
        echo "‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        sleep 20
    done
}

function view_logs() {
    echo "üìú –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    mapfile -t containers < <(docker ps --filter "name=${SERVICE_PREFIX}_" --format "{{.Names}}")
    if [ ${#containers[@]} -eq 0 ]; then
        echo "‚ùå –ù–µ–º–∞—î –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤."
        return
    fi

    for i in "${!containers[@]}"; do
        echo "$((i+1)). ${containers[$i]}"
    done

    read -p "üëâ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤: " choice

    if ! [[ "$choice" =~ ^[0-9]+$ ]] || (( choice < 1 || choice > ${#containers[@]} )); then
        echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä."
        return
    fi

    CONTAINER_NAME="${containers[$((choice-1))]}"
    echo "üìú –õ–æ–≥–∏ –¥–ª—è $CONTAINER_NAME. –î–ª—è –≤–∏—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C."
    docker logs -f "$CONTAINER_NAME"
}

function remove_nodes() {
    echo "‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ ${SERVICE_PREFIX}_..."
    read -p "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–æ–¥–∏? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
        docker ps -a --filter "name=${SERVICE_PREFIX}_" -q | xargs -r docker rm -f
        echo "‚úÖ –£—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ."
    else
        echo "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ..."
    sudo apt update
    sudo apt install -y docker.io
    sudo systemctl start docker
    sudo systemctl enable docker
    echo "‚úÖ Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ."
fi

while true; do
    echo ""
    echo "üöÄ –ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç—å–º–∞ –Ω–æ–¥–∞–º–∏ Datagram (Docker):"
    echo "1Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ (–∑–∞–ø—É—Å—Ç–∏—Ç–∏) –Ω–æ–¥–∏"
    echo "2Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –Ω–æ–¥–∏"
    echo "3Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏ –Ω–æ–¥–∏"
    echo "4Ô∏è‚É£ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–æ–¥–∏"
    echo "5Ô∏è‚É£ –í–∏–π—Ç–∏"
    read -p "üëâ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó: " choice

    case $choice in
        1) install_nodes ;;
        2) restart_nodes ;;
        3) view_logs ;;
        4) remove_nodes ;;
        5) echo "üëã –í–∏—Ö—ñ–¥..."; exit 0 ;;
        *) echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." ;;
    esac
done
